{"version":3,"sources":["componets/Button.js","config/firebase.js","componets/Message.js","componets/Channel.js","login/signInWithGoogle.js","login/signOut.js","hooks/useAuthState.js","App.js","reportWebVitals.js","index.js"],"names":["Button","onClick","children","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","googleAuthProvider","auth","GoogleAuthProvider","formatDate","date","formattedDate","formatRelative","Date","charAt","toUpperCase","slice","Message","createdAt","text","displayName","photoURL","src","alt","className","width","height","seconds","Channel","user","useState","messages","setMessages","useEffect","collection","orderBy","limit","onSnapshot","querySnapshot","data","docs","map","doc","id","uid","newMessage","setNewMessage","messagesRef","inputRef","useRef","current","focus","message","onSubmit","e","preventDefault","trimmedMessage","trim","add","FieldValue","serverTimestamp","ref","type","value","onChange","target","placeholder","disabled","signInWithGoogle","a","useDeviceLanguage","signInWithPopup","console","error","signOut","useAuthState","initializing","currentUser","setUser","onAuthStateChanged","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7808b5f.chunk.js","sourcesContent":["const Button = ({\r\n    onClick = null,\r\n    children = null\r\n}) => \r\n(\r\n    <button onClick ={onClick} >{children} </button> \r\n);\r\nexport default Button;  ","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\n//inicializar farebase  \r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCPTG8IYFz5XHvu3PKv72RQEkRFTpVmM_g\",\r\n    authDomain: \"firechat-test-73281.firebaseapp.com\",\r\n    projectId: \"firechat-test-73281\",\r\n    storageBucket: \"firechat-test-73281.appspot.com\",\r\n    messagingSenderId: \"357317668600\",\r\n    appId: \"1:357317668600:web:f3fc653b583c39e78e550d\",\r\n    measurementId: \"G-J0CBREM2GG\"\r\n  };\r\n   firebase.initializeApp(firebaseConfig);\r\n\r\n   //Tomo los elementos basicos para trabajar con firebase.\r\n\r\n   const db = firebase.firestore();\r\n   const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n   \r\n   export {\r\n       db,\r\n       googleAuthProvider,\r\n       firebase\r\n   }","import { formatRelative } from 'date-fns';\r\n\r\nconst formatDate = date => {\r\n    let formattedDate = '';\r\n    if (date) {\r\n        //Convert the date in words relative to the current date\r\n        formattedDate = formatRelative(date, new Date());\r\n        //Uppercase the first letter\r\n        formattedDate=\r\n        formattedDate.charAt(0).toUpperCase() + formattedDate.slice(1);\r\n}\r\nreturn formattedDate;\r\n};\r\n\r\nconst Message= ({\r\n    createdAt = null,\r\n    text= '',\r\n    displayName = '',\r\n    photoURL = '',\r\n}) => {\r\n    if(!text) return null;\r\n\r\n    return (\r\n        <div>\r\n        {photoURL ? (\r\n            <img\r\n            src={photoURL}\r\n            alt=\"Avatar\"\r\n            className= \"rounded-full mr-a\"\r\n            width={45}\r\n            height={45}\r\n            />\r\n        ) : null}\r\n        {displayName ? <p>{displayName}</p>: null }\r\n        {createdAt?.seconds ? (\r\n            <span>{formatDate(new Date(createdAt.seconds * 1000))}</span>\r\n            ) : null}\r\n            <p>{text} </p>\r\n\r\n            </div> \r\n        );\r\n};\r\n        export default Message;\r\n\r\n    ","import { useEffect, useState, useRef } from \"react\";\r\nimport { db, firebase } from \"../config/firebase\";\r\nimport Message from \"./Message\";\r\n\r\nconst Channel = ({ user = null }) => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  //Necesito cargar los mensajes desde la BD\r\n  useEffect(() => {\r\n    /*\r\n  Crear el query de los mensajes,\r\n  Cargar 100 mensajes ordenados por fecha.\r\n  */\r\n    const query = db.collection(\"messages\").orderBy(\"createdAt\").limit(100);\r\n\r\n    const unsubscribe = query.onSnapshot((querySnapshot) => {\r\n      //Obtiene todos los mensajes desde la bd con su ID.\r\n      const data = querySnapshot.docs.map((doc) => ({\r\n        ...doc.data(),\r\n        id: doc.id,\r\n      }));\r\n      //Actualizo os mensajes obtenidos desde la bd.\r\n      setMessages(data);\r\n    });\r\n    //Clean Up\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  //Codigo para agregar nuevos mensajes\r\n  const { uid, displayName, photoURL } = user;\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n\r\n  const handleMessageOnChange = (e) => {\r\n    e.preventDefault();\r\n    setNewMessage(e.target.value);\r\n  };\r\n  const messagesRef = db.collection(\"messages\");\r\n\r\n  const handleOnSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const trimmedMessage = newMessage.trim();\r\n    if (trimmedMessage) {\r\n      //Add new message in Firestore\r\n      messagesRef.add({\r\n        text: trimmedMessage,\r\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n        uid,\r\n        displayName,\r\n        photoURL,\r\n      });\r\n      //Clear input field\r\n      setNewMessage(\"\");\r\n    }\r\n  };\r\n  const inputRef = useRef();\r\n  useEffect(() => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [inputRef]);\r\n  return (\r\n    <>\r\n      <ul>\r\n        {messages.map((message) => (\r\n          <li key={message.id}>\r\n            <Message {...message} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <form onSubmit={handleOnSubmit}>\r\n        <input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={handleMessageOnChange}\r\n          placeholder=\"Escribe tu mensaje aquÃ­...\"\r\n        />\r\n        <button type=\"submit\" disabled={!newMessage}>\r\n          Send\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\nexport default Channel;\r\n","import {googleAuthProvider, firebase} from '../config/firebase';\r\n\r\nconst signInWithGoogle = async () => {\r\n    //coloca el lenguaje de preferencia del dispositivo\r\n    firebase.auth().useDeviceLanguage();\r\n\r\n    //Inicio el procedo de login dentro de try ... catch\r\n    try{\r\n      await firebase.auth().signInWithPopup(googleAuthProvider);\r\n\r\n    } catch (e) {\r\n      console.error(e.message);\r\n        }\r\n  };\r\n\r\nexport default signInWithGoogle;","import {firebase} from '../config/firebase';\r\n\r\nconst signOut = async () =>{\r\n    try {\r\n        await firebase.auth().signOut();\r\n    }catch (e) {\r\n        console.error(e);\r\n    }\r\n};\r\n\r\nexport default signOut;","import { useState, useEffect } from 'react'; \r\n\r\nfunction useAuthState(auth) {\r\n    const [initializing]= useState(true);\r\n    const[user, setUser]= useState(() => auth.currentUser);\r\n\r\nuseEffect(() => {\r\n    const unsubcribe = auth.onAuthStateChanged(user =>{\r\n        if (user) {\r\n            setUser(user);\r\n        }else {\r\n            setUser(false);\r\n        }\r\n\r\n    });\r\n//Cleanup subdscription\r\nreturn unsubcribe;\r\n    \r\n},[auth, initializing]);\r\n\r\nreturn {user, initializing};\r\n\r\n}\r\n\r\nexport default useAuthState;","import { Button, Channel } from \"./componets\";\r\nimport { signInWithGoogle, signOut } from \"./login\";\r\nimport { useAuthState } from \"./hooks\";\r\nimport { firebase } from \"./config/firebase\";\r\n\r\nfunction App() {\r\n  //Entegracion del hook useAuthState\r\n  const { user, initializing } = useAuthState(firebase.auth());\r\n  // Renderizar el componente Button\r\n  //Renderezar en funcion de la existencia de un usuario con operador ternario.\r\n  const renderLoging = () => {\r\n    if (initializing) {\r\n      return (\r\n        <div>\r\n          <h1>Loading...</h1>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      {user ? (\r\n        <>\r\n          <Button onClick={signOut}> Logout Google</Button>\r\n          <p>Bienvenido al CHAT</p>\r\n          <Channel user={user} />\r\n        </>\r\n      ) : (\r\n        <Button onClick={signInWithGoogle}> Sing in with Google</Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}